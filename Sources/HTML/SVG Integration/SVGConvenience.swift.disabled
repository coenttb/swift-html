////
////  SVGConvenience.swift
////  swift-html
////
////  Convenience functions for common SVG operations
////
//
//import SVG
//import SVGTypes
//
//// MARK: - HTML Extensions for SVG
//
//extension HTML {
//    /// Wraps this HTML element with SVG attributes.
//    ///
//    /// This allows adding SVG-specific attributes to HTML elements that contain SVG.
//    public func svgAttributes(
//        width: Double? = nil,
//        height: Double? = nil,
//        viewBox: String? = nil,
//        preserveAspectRatio: String? = nil
//    ) -> some HTML {
//        var element = self
//
//        if let width = width {
//            element = element.attribute("width", String(format: "%.0f", width))
//        }
//        if let height = height {
//            element = element.attribute("height", String(format: "%.0f", height))
//        }
//        if let viewBox = viewBox {
//            element = element.attribute("viewBox", viewBox)
//        }
//        if let preserveAspectRatio = preserveAspectRatio {
//            element = element.attribute("preserveAspectRatio", preserveAspectRatio)
//        }
//
//        return element
//    }
//}
//
//// MARK: - Quick Icon Builders
//
///// Creates a simple circle icon.
//public func circleIcon(
//    size: Double = 20,
//    fillColor: String = "currentColor",
//    strokeColor: String? = nil,
//    strokeWidth: Double? = nil
//) -> InlineSVG {
//    InlineSVG {
//        svg(width: size, height: size, viewBox: "0 0 \(size) \(size)") {
//            circle(cx: size/2, cy: size/2, r: size/2 - (strokeWidth ?? 0)/2) {
//                fill(fillColor)
//                if let strokeColor = strokeColor {
//                    stroke(strokeColor, width: strokeWidth ?? 1)
//                }
//            }
//        }
//    }
//}
//
///// Creates a simple square icon.
//public func squareIcon(
//    size: Double = 20,
//    fillColor: String = "currentColor",
//    strokeColor: String? = nil,
//    strokeWidth: Double? = nil,
//    cornerRadius: Double? = nil
//) -> InlineSVG {
//    InlineSVG {
//        svg(width: size, height: size, viewBox: "0 0 \(size) \(size)") {
//            if let cornerRadius = cornerRadius {
//                rect(x: 0, y: 0, width: size, height: size, rx: cornerRadius) {
//                    fill(fillColor)
//                    if let strokeColor = strokeColor {
//                        stroke(strokeColor, width: strokeWidth ?? 1)
//                    }
//                }
//            } else {
//                rect(x: 0, y: 0, width: size, height: size) {
//                    fill(fillColor)
//                    if let strokeColor = strokeColor {
//                        stroke(strokeColor, width: strokeWidth ?? 1)
//                    }
//                }
//            }
//        }
//    }
//}
//
///// Creates a plus icon.
//public func plusIcon(
//    size: Double = 20,
//    color: String = "currentColor",
//    strokeWidth: Double = 2
//) -> InlineSVG {
//    InlineSVG {
//        svg(width: size, height: size, viewBox: "0 0 \(size) \(size)") {
//            line(x1: size/2, y1: size * 0.2, x2: size/2, y2: size * 0.8) {
//                stroke(color, width: strokeWidth)
//                strokeLinecap(.round)
//            }
//            line(x1: size * 0.2, y1: size/2, x2: size * 0.8, y2: size/2) {
//                stroke(color, width: strokeWidth)
//                strokeLinecap(.round)
//            }
//        }
//    }
//}
//
///// Creates a minus icon.
//public func minusIcon(
//    size: Double = 20,
//    color: String = "currentColor",
//    strokeWidth: Double = 2
//) -> InlineSVG {
//    InlineSVG {
//        svg(width: size, height: size, viewBox: "0 0 \(size) \(size)") {
//            line(x1: size * 0.2, y1: size/2, x2: size * 0.8, y2: size/2) {
//                stroke(color, width: strokeWidth)
//                strokeLinecap(.round)
//            }
//        }
//    }
//}
//
///// Creates an X (close) icon.
//public func closeIcon(
//    size: Double = 20,
//    color: String = "currentColor",
//    strokeWidth: Double = 2
//) -> InlineSVG {
//    InlineSVG {
//        svg(width: size, height: size, viewBox: "0 0 \(size) \(size)") {
//            line(x1: size * 0.2, y1: size * 0.2, x2: size * 0.8, y2: size * 0.8) {
//                stroke(color, width: strokeWidth)
//                strokeLinecap(.round)
//            }
//            line(x1: size * 0.8, y1: size * 0.2, x2: size * 0.2, y2: size * 0.8) {
//                stroke(color, width: strokeWidth)
//                strokeLinecap(.round)
//            }
//        }
//    }
//}
//
///// Creates a hamburger menu icon.
//public func menuIcon(
//    size: Double = 20,
//    color: String = "currentColor",
//    strokeWidth: Double = 2
//) -> InlineSVG {
//    InlineSVG {
//        svg(width: size, height: size, viewBox: "0 0 \(size) \(size)") {
//            line(x1: size * 0.15, y1: size * 0.25, x2: size * 0.85, y2: size * 0.25) {
//                stroke(color, width: strokeWidth)
//                strokeLinecap(.round)
//            }
//            line(x1: size * 0.15, y1: size * 0.5, x2: size * 0.85, y2: size * 0.5) {
//                stroke(color, width: strokeWidth)
//                strokeLinecap(.round)
//            }
//            line(x1: size * 0.15, y1: size * 0.75, x2: size * 0.85, y2: size * 0.75) {
//                stroke(color, width: strokeWidth)
//                strokeLinecap(.round)
//            }
//        }
//    }
//}
//
//// MARK: - Spinner/Loading Icons
//
///// Creates an animated spinner icon.
//public func spinnerIcon(
//    size: Double = 20,
//    color: String = "currentColor",
//    strokeWidth: Double = 2
//) -> InlineSVG {
//    InlineSVG {
//        svg(width: size, height: size, viewBox: "0 0 \(size) \(size)") {
//            style {
//                """
//                @keyframes spin {
//                    0% { transform: rotate(0deg); }
//                    100% { transform: rotate(360deg); }
//                }
//                .spinner {
//                    animation: spin 1s linear infinite;
//                    transform-origin: center;
//                }
//                """
//            }
//            circle(
//                cx: size/2,
//                cy: size/2,
//                r: (size - strokeWidth)/2
//            ) {
//                className("spinner")
//                fill("none")
//                stroke(color, width: strokeWidth)
//                strokeDasharray("\(size * 0.6) \(size * 0.4)")
//                strokeLinecap(.round)
//            }
//        }
//    }
//}
